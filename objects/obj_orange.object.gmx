<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_orange</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Depth, speed and global variables

depth = -1000;
speed = 5;

globalvar flag;
flag = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Respawning character

with(obj_orange){
    instance_destroy();
    instance_create(416, 384, obj_orange);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Respawning character

//pacman
with(obj_pacman){
    instance_destroy();
    instance_create(384, 608, obj_pacman);
}

//enemies
with(obj_pink){
    instance_destroy();
    instance_create(384, 384, obj_pink);
}

with(obj_red){
    instance_destroy();
    instance_create(384, 320, obj_red);
}

with(obj_orange){
    instance_destroy();
    instance_create(416, 384, obj_orange);
}

with(obj_blue){
    instance_destroy();
    instance_create(352, 384, obj_blue);
}

nokey = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check for blue sprite

if(sprite_index==sp_dblue){
    speed = 4;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement of the orange
// 416, 384

if(x==416 and y==384) flag = true;

if(flag == false){
    if(position_meeting(x, y, obj_white)){
        //Initializing variables
        var lfree = true, rfree = true, ufree = true, dfree = true;
        
        if(position_meeting(x+20, y, obj_brick)) rfree = false;
        if(position_meeting(x-20, y, obj_brick)) lfree = false;
        if(position_meeting(x, y+20, obj_brick)) dfree = false;
        if(position_meeting(x, y-20, obj_brick)) ufree = false;
        
        if(direction == 0) lfree = false;
        if(direction == 180) rfree = false;
        if(direction == 90) dfree = false;
        if(direction == 270) ufree = false;
    
        //Initializing varibles for right
        var xright = x, yright = y, total_right_distance = 2000;
        if(rfree){
            while(position_meeting(xright+32, yright, obj_white)){
                xright += 32;
            }
            xright += 32;
            var dist_to_point = sqrt(power(xright - x, 2) + power(yright - y, 2));
            var dist_to_pacman = sqrt(power(416 - xright, 2) + power(384 - yright, 2));
            total_right_distance = dist_to_point + dist_to_pacman;
        }
        
        //Initializing variables fo left
        var xleft = x, yleft = y, total_left_distance = 2000;
        if(lfree){
            while(position_meeting(xleft-32, yleft, obj_white)){
                xleft -= 32;   
            }
            xleft -= 32;
            var dist_to_point = sqrt(power(xleft - x, 2) + power(yleft - y, 2));
            var dist_to_pacman = sqrt(power(416 - xleft, 2) + power(384 - yleft, 2));
            total_left_distance = dist_to_point + dist_to_pacman;
        }
        
        //Initializing variables fo up
        var xup = x, yup = y, total_up_distance = 2000;
        if(ufree){
            while(position_meeting(xup, yup-32, obj_white)){
                yup -= 32;   
            }
            yup -= 32;
            var dist_to_point = sqrt(power(xup - x, 2) + power(yup - y, 2));
            var dist_to_pacman = sqrt(power(416 - xup, 2) + power(384 - yup, 2));
            total_up_distance = dist_to_point + dist_to_pacman;
        }
        
        //Initializing variables fo down
        var xdown = x, ydown = y, total_down_distance = 2000;
        if(dfree){
            while(position_meeting(xdown, ydown+32, obj_white)){
                ydown += 32;   
            }
            ydown += 32;
            var dist_to_point = sqrt(power(xdown - x, 2) + power(ydown - y, 2));
            var dist_to_pacman = sqrt(power(416 - xdown, 2) + power(384 - ydown, 2));
            total_down_distance = dist_to_point + dist_to_pacman;
        }    
        
        //Initializing min variable
        var minimum = min(total_right_distance, total_left_distance, total_up_distance, total_down_distance);
        
        if(minimum == total_right_distance){
            direction = 0;
        }else{
            if(minimum == total_left_distance){
                direction = 180;
            }else{
                if(minimum == total_up_distance){
                    direction = 90;
                }else{
                    direction = 270;
                }
            }
        }
        alarm[2] = 30;
    }
}

if(position_meeting(x+64, y, obj_pacman) or position_meeting(x-64, y, obj_pacman) or position_meeting(x, y+64, obj_pacman) or position_meeting(x, y-64, obj_pacman)){
    flag = false;
}else{
    if(flag == true and position_meeting(x, y, obj_white)){
        //Initializing variables
        var lfree = true, rfree = true, ufree = true, dfree = true;
        
        if(position_meeting(x+20, y, obj_brick)) rfree = false;
        if(position_meeting(x-20, y, obj_brick)) lfree = false;
        if(position_meeting(x, y+20, obj_brick)) dfree = false;
        if(position_meeting(x, y-20, obj_brick)) ufree = false;
        
        if(direction == 0) lfree = false;
        if(direction == 180) rfree = false;
        if(direction == 90) dfree = false;
        if(direction == 270) ufree = false;
    
        //Initializing varibles for right
        var xright = x, yright = y, total_right_distance = 2000;
        if(rfree){
            while(position_meeting(xright+32, yright, obj_white)){
                xright += 32;
            }
            xright += 32;
            var dist_to_point = sqrt(power(xright - x, 2) + power(yright - y, 2));
            var dist_to_pacman = sqrt(power(obj_pacman.x - xright, 2) + power(obj_pacman.y - yright, 2));
            total_right_distance = dist_to_point + dist_to_pacman;
        }
        
        //Initializing variables fo left
        var xleft = x, yleft = y, total_left_distance = 2000;
        if(lfree){
            while(position_meeting(xleft-32, yleft, obj_white)){
                xleft -= 32;   
            }
            xleft -= 32;
            var dist_to_point = sqrt(power(xleft - x, 2) + power(yleft - y, 2));
            var dist_to_pacman = sqrt(power(obj_pacman.x - xleft, 2) + power(obj_pacman.y - yleft, 2));
            total_left_distance = dist_to_point + dist_to_pacman;
        }
        
        //Initializing variables fo up
        var xup = x, yup = y, total_up_distance = 2000;
        if(ufree){
            while(position_meeting(xup, yup-32, obj_white)){
                yup -= 32;   
            }
            yup -= 32;
            var dist_to_point = sqrt(power(xup - x, 2) + power(yup - y, 2));
            var dist_to_pacman = sqrt(power(obj_pacman.x - xup, 2) + power(obj_pacman.y - yup, 2));
            total_up_distance = dist_to_point + dist_to_pacman;
        }
        
        //Initializing variables fo down
        var xdown = x, ydown = y, total_down_distance = 2000;
        if(dfree){
            while(position_meeting(xdown, ydown+32, obj_white)){
                ydown += 32;   
            }
            ydown += 32;
            var dist_to_point = sqrt(power(xdown - x, 2) + power(ydown - y, 2));
            var dist_to_pacman = sqrt(power(obj_pacman.x - xdown, 2) + power(obj_pacman.y - ydown, 2));
            total_down_distance = dist_to_point + dist_to_pacman;
        }    
        
        //Initializing min variable
        var minimum = min(total_right_distance, total_left_distance, total_up_distance, total_down_distance);
        
        if(minimum == total_right_distance){
            direction = 0;
        }else{
            if(minimum == total_left_distance){
                direction = 180;
            }else{
                if(minimum == total_up_distance){
                    direction = 90;
                }else{
                    direction = 270;
                }
            }
        }
        alarm[2] = 30;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///End rooms

if(x&lt;0){
    x = room_width - 10;
}

if(x&gt;room_width){
    x = 10;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_brick">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Aligning to grid

move_snap(32, 32);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_pacman">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroying pacman

if(sprite_index==sp_dblue){
    speed = 0;
    move_snap(32, 32);
    sprite_index = sp_edblue;
    image_speed = 0.3;
    alarm[1] = 30;
}else{
    if(sprite_index!=sp_edblue){
        speed = 0;
        life--;
        move_snap(32, 32);
        
        if(life==0){
            with(obj_pacman){
                speed = 0;
                instance_destroy();
            }
            show_message("You Lost");
            room_restart();
        }
        
        with(obj_pacman){
            speed = 0;
            sprite_index = sp_dead;
            image_speed = 0.5;
            move_snap(32, 32);
        }
        nokey = true;
        alarm[0] = 30;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>15,15</point>
    <point>15,15</point>
  </PhysicsShapePoints>
</object>
